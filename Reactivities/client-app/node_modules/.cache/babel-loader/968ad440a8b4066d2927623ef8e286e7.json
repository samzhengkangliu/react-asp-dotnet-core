{"ast":null,"code":"import axios from \"axios\";\nimport { history } from \"../..\";\naxios.defaults.baseURL = \"http://localhost:5000/api\";\naxios.interceptors.response.use(undefined, error => {\n  const {\n    status,\n    data,\n    config\n  } = error.response;\n\n  if (status === 404) {\n    history.push(\"/notfound\");\n  }\n\n  if (status === 400 && config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\n    history.push(\"/notfound\");\n  }\n});\n\nconst responseBody = response => response.data; // Add delay and carrying\n// carrying is a process where we can transform a function with multiple arguments into a sequence of nesting functions\n\n\nconst sleep = ms => response => new Promise(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n  get: url => axios.get(url).then(sleep(1000)).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n  delete: url => axios.delete(url).then(sleep(1000)).then(responseBody)\n};\nconst Activities = {\n  list: () => requests.get(\"/activities\"),\n  details: id => requests.get(`/activities/${id}`),\n  create: activity => requests.post(\"/activities\", activity),\n  update: activity => requests.put(`/activities/${activity.id}`, activity),\n  delete: id => requests.delete(`/activities/${id}`)\n};\nexport default {\n  Activities\n};","map":{"version":3,"sources":["/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/src/app/api/agent.ts"],"names":["axios","history","defaults","baseURL","interceptors","response","use","undefined","error","status","data","config","push","method","errors","hasOwnProperty","responseBody","sleep","ms","Promise","resolve","setTimeout","requests","get","url","then","post","body","put","delete","Activities","list","details","id","create","activity","update"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;AAEA,SAASC,OAAT,QAAwB,OAAxB;AAEAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;AAEAH,KAAK,CAACI,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgCC,SAAhC,EAA2CC,KAAK,IAAI;AAClD,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAA0BH,KAAK,CAACH,QAAtC;;AACA,MAAII,MAAM,KAAK,GAAf,EAAoB;AAClBR,IAAAA,OAAO,CAACW,IAAR,CAAa,WAAb;AACD;;AACD,MAAIH,MAAM,KAAK,GAAX,IAAkBE,MAAM,CAACE,MAAP,KAAkB,KAApC,IAA6CH,IAAI,CAACI,MAAL,CAAYC,cAAZ,CAA2B,IAA3B,CAAjD,EAAmF;AACjFd,IAAAA,OAAO,CAACW,IAAR,CAAa,WAAb;AACD;AACF,CARD;;AAUA,MAAMI,YAAY,GAAIX,QAAD,IAA6BA,QAAQ,CAACK,IAA3D,C,CAEA;AACA;;;AACA,MAAMO,KAAK,GAAIC,EAAD,IAAiBb,QAAD,IAC5B,IAAIc,OAAJ,CAA4BC,OAAD,IACzBC,UAAU,CAAC,MAAMD,OAAO,CAACf,QAAD,CAAd,EAA0Ba,EAA1B,CADZ,CADF;;AAKA,MAAMI,QAAQ,GAAG;AACfC,EAAAA,GAAG,EAAGC,GAAD,IAAiBxB,KAAK,CAACuB,GAAN,CAAUC,GAAV,EAAeC,IAAf,CAAoBR,KAAK,CAAC,IAAD,CAAzB,EAAiCQ,IAAjC,CAAsCT,YAAtC,CADP;AAEfU,EAAAA,IAAI,EAAE,CAACF,GAAD,EAAcG,IAAd,KAA2B3B,KAAK,CAAC0B,IAAN,CAAWF,GAAX,EAAgBG,IAAhB,EAAsBF,IAAtB,CAA2BR,KAAK,CAAC,IAAD,CAAhC,EAAwCQ,IAAxC,CAA6CT,YAA7C,CAFlB;AAGfY,EAAAA,GAAG,EAAE,CAACJ,GAAD,EAAcG,IAAd,KAA2B3B,KAAK,CAAC4B,GAAN,CAAUJ,GAAV,EAAeG,IAAf,EAAqBF,IAArB,CAA0BR,KAAK,CAAC,IAAD,CAA/B,EAAuCQ,IAAvC,CAA4CT,YAA5C,CAHjB;AAIfa,EAAAA,MAAM,EAAGL,GAAD,IAAiBxB,KAAK,CAAC6B,MAAN,CAAaL,GAAb,EAAkBC,IAAlB,CAAuBR,KAAK,CAAC,IAAD,CAA5B,EAAoCQ,IAApC,CAAyCT,YAAzC;AAJV,CAAjB;AAOA,MAAMc,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE,MAA4BT,QAAQ,CAACC,GAAT,CAAa,aAAb,CADjB;AAEjBS,EAAAA,OAAO,EAAGC,EAAD,IAAgBX,QAAQ,CAACC,GAAT,CAAc,eAAcU,EAAG,EAA/B,CAFR;AAGjBC,EAAAA,MAAM,EAAGC,QAAD,IAAyBb,QAAQ,CAACI,IAAT,CAAc,aAAd,EAA6BS,QAA7B,CAHhB;AAIjBC,EAAAA,MAAM,EAAGD,QAAD,IACNb,QAAQ,CAACM,GAAT,CAAc,eAAcO,QAAQ,CAACF,EAAG,EAAxC,EAA2CE,QAA3C,CALe;AAMjBN,EAAAA,MAAM,EAAGI,EAAD,IAAgBX,QAAQ,CAACO,MAAT,CAAiB,eAAcI,EAAG,EAAlC;AANP,CAAnB;AASA,eAAe;AACbH,EAAAA;AADa,CAAf","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { IActivity } from \"../models/activity\";\nimport { history } from \"../..\";\n\naxios.defaults.baseURL = \"http://localhost:5000/api\";\n\naxios.interceptors.response.use(undefined, error => {\n  const {status, data, config } = error.response;\n  if (status === 404) {\n    history.push(\"/notfound\");\n  }\n  if (status === 400 && config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\n    history.push(\"/notfound\");\n  }\n})\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\n// Add delay and carrying\n// carrying is a process where we can transform a function with multiple arguments into a sequence of nesting functions\nconst sleep = (ms: number) => (response: AxiosResponse) =>\n  new Promise<AxiosResponse>((resolve) =>\n    setTimeout(() => resolve(response), ms)\n  );\n\nconst requests = {\n  get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\n  post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n  put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n  delete: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody),\n};\n\nconst Activities = {\n  list: (): Promise<IActivity[]> => requests.get(\"/activities\"),\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.delete(`/activities/${id}`),\n};\n\nexport default {\n  Activities,\n};\n"]},"metadata":{},"sourceType":"module"}