{"ast":null,"code":"import _initializerDefineProperty from \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _temp;\n\nimport { observable, action, computed, configure, runInAction } from \"mobx\";\nimport { createContext } from \"react\";\nimport agent from \"../api/agent\";\nconfigure({\n  enforceActions: \"always\"\n});\nlet ActivityStore = (_class = (_temp = class ActivityStore {\n  constructor() {\n    _initializerDefineProperty(this, \"activityRegistry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"activity\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"loadingInitial\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"submitting\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"target\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"loadActivities\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"loadActivity\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"clearActivity\", _descriptor8, this);\n\n    this.getActivity = id => {\n      return this.activityRegistry.get(id);\n    };\n\n    _initializerDefineProperty(this, \"createActivity\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"editActivity\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"deleteActivity\", _descriptor11, this);\n  }\n\n  get activitiesByDate() {\n    return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()));\n  }\n\n  groupActivitiesByDate(activities) {\n    const sortedActivities = activities.sort((a, b) => Date.parse(a.date) - Date.parse(b.date));\n    return Object.entries(sortedActivities);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"activityRegistry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"activity\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"loadingInitial\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"submitting\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"activitiesByDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"activitiesByDate\"), _class.prototype), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"loadActivities\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loadingInitial = true;\n\n      try {\n        const activities = await agent.Activities.list();\n        runInAction(\"loading activities\", () => {\n          activities.forEach(activity => {\n            activity.date = activity.date.split(\".\")[0];\n            this.activityRegistry.set(activity.id, activity);\n          });\n          this.loadingInitial = false;\n        });\n        console.log(this.groupActivitiesByDate(activities));\n      } catch (error) {\n        runInAction(\"load activities error\", () => {\n          this.loadingInitial = false;\n        });\n      }\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"loadActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async id => {\n      let activity = this.getActivity(id);\n\n      if (activity) {\n        this.activity = activity;\n      } else {\n        this.loadingInitial = true;\n\n        try {\n          activity = await agent.Activities.details(id);\n          runInAction(\"getting activity\", () => {\n            this.activity = activity;\n            this.loadingInitial = false;\n          });\n        } catch (error) {\n          runInAction(\"getting activity error\", () => {\n            this.loadingInitial = false;\n          });\n          console.log(error);\n        }\n      }\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"clearActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.activity = null;\n    };\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"createActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.create(activity);\n        runInAction(\"create activity\", () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.submitting = false;\n        });\n      } catch (error) {\n        runInAction(\"create activity error\", () => {\n          this.submitting = false;\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"editActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.update(activity);\n        runInAction(\"editing activity\", () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.activity = activity;\n          this.submitting = false;\n        });\n      } catch (error) {\n        runInAction(\"edit activity error\", () => {\n          this.submitting = false;\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"deleteActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async (event, id) => {\n      this.submitting = true;\n      this.target = event.currentTarget.name;\n\n      try {\n        await agent.Activities.delete(id);\n        runInAction(\"deleting activity\", () => {\n          this.activityRegistry.delete(id);\n          this.submitting = false;\n          this.target = \"\";\n        });\n      } catch (error) {\n        runInAction(\"delete activity error\", () => {\n          this.submitting = false;\n          this.target = \"\";\n        });\n        console.log(error);\n      }\n    };\n  }\n})), _class);\nexport default createContext(new ActivityStore());","map":{"version":3,"sources":["/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/src/app/stores/ActivityStore.ts"],"names":["observable","action","computed","configure","runInAction","createContext","agent","enforceActions","ActivityStore","getActivity","id","activityRegistry","get","activitiesByDate","groupActivitiesByDate","Array","from","values","activities","sortedActivities","sort","a","b","Date","parse","date","Object","entries","Map","loadingInitial","Activities","list","forEach","activity","split","set","console","log","error","details","submitting","create","update","event","target","currentTarget","name","delete"],"mappings":"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","sourcesContent":["import { observable, action, computed, configure, runInAction } from \"mobx\";\nimport { createContext, SyntheticEvent } from \"react\";\nimport { IActivity } from \"../models/activity\";\nimport agent from \"../api/agent\";\n\nconfigure({ enforceActions: \"always\" });\n\nclass ActivityStore {\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = \"\";\n\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  groupActivitiesByDate(activities: IActivity[]) {\n    const sortedActivities = activities.sort(\n      (a, b) => Date.parse(a.date) - Date.parse(b.date)\n    );\n    return Object.entries(sortedActivities);\n  }\n\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activities = await agent.Activities.list();\n      runInAction(\"loading activities\", () => {\n        activities.forEach((activity) => {\n          activity.date = activity.date.split(\".\")[0];\n          this.activityRegistry.set(activity.id, activity);\n        });\n        this.loadingInitial = false;\n      });\n      console.log(this.groupActivitiesByDate(activities));\n    } catch (error) {\n      runInAction(\"load activities error\", () => {\n        this.loadingInitial = false;\n      });\n    }\n  };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n    if (activity) {\n      this.activity = activity;\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        runInAction(\"getting activity\", () => {\n          this.activity = activity;\n          this.loadingInitial = false;\n        });\n      } catch (error) {\n        runInAction(\"getting activity error\", () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n      runInAction(\"create activity\", () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction(\"create activity error\", () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction(\"editing activity\", () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction(\"edit activity error\", () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action deleteActivity = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Activities.delete(id);\n      runInAction(\"deleting activity\", () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n        this.target = \"\";\n      });\n    } catch (error) {\n      runInAction(\"delete activity error\", () => {\n        this.submitting = false;\n        this.target = \"\";\n      });\n      console.log(error);\n    }\n  };\n}\n\nexport default createContext(new ActivityStore());\n"]},"metadata":{},"sourceType":"module"}