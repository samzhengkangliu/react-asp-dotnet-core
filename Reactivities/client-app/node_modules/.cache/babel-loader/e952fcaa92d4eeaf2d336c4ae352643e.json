{"ast":null,"code":"import _initializerDefineProperty from \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _temp;\n\nimport { observable, action, computed, configure, runInAction } from \"mobx\";\nimport { createContext } from \"react\";\nimport agent from \"../api/agent\";\nconfigure({\n  enforceActions: \"always\"\n});\nlet ActivityStore = (_class = (_temp = class ActivityStore {\n  constructor() {\n    _initializerDefineProperty(this, \"activityRegistry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"activities\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"activity\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"loadingInitial\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"editMode\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"submitting\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"target\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"loadActivities\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"loadActivity\", _descriptor9, this);\n\n    this.getActivity = id => {\n      return this.activityRegistry.get(id);\n    };\n\n    _initializerDefineProperty(this, \"createActivity\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"editActivity\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"deleteActivity\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"openCreateForm\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"openEditForm\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"cancelSelectedActivity\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"cancelFormOpen\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"selectActivity\", _descriptor17, this);\n  }\n\n  get activitiesByDate() {\n    return Array.from(this.activityRegistry.values()).sort((a, b) => Date.parse(a.date) - Date.parse(b.date));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"activityRegistry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"activities\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"activity\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"loadingInitial\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"editMode\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"submitting\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"activitiesByDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"activitiesByDate\"), _class.prototype), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"loadActivities\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loadingInitial = true;\n\n      try {\n        const activities = await agent.Activities.list();\n        runInAction(\"loading activities\", () => {\n          activities.forEach(activity => {\n            activity.date = activity.date.split(\".\")[0];\n            this.activityRegistry.set(activity.id, activity);\n          });\n          this.loadingInitial = false;\n        });\n      } catch (error) {\n        runInAction(\"load activities error\", () => {\n          this.loadingInitial = false;\n        });\n      }\n    };\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"loadActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async id => {\n      let activity = this.getActivity(id);\n\n      if (activity) {\n        this.activity = activity;\n      } else {\n        this.loadingInitial = true;\n\n        try {\n          activity = await agent.Activities.details(id);\n          runInAction(\"getting activity\", () => {\n            this.activity = activity;\n            this.loadingInitial = false;\n          });\n        } catch (error) {\n          runInAction(\"getting activity error\", () => {\n            this.loadingInitial = false;\n          });\n          console.log(error);\n        }\n      }\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"createActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.create(activity);\n        runInAction(\"create activity\", () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.editMode = false;\n          this.submitting = false;\n        });\n      } catch (error) {\n        runInAction(\"create activity error\", () => {\n          this.submitting = false;\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"editActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.update(activity);\n        runInAction(\"editing activity\", () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.activity = activity;\n          this.editMode = false;\n          this.submitting = false;\n        });\n      } catch (error) {\n        runInAction(\"edit activity error\", () => {\n          this.submitting = false;\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"deleteActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async (event, id) => {\n      this.submitting = true;\n      this.target = event.currentTarget.name;\n\n      try {\n        await agent.Activities.delete(id);\n        runInAction(\"deleting activity\", () => {\n          this.activityRegistry.delete(id);\n          this.submitting = false;\n          this.target = \"\";\n        });\n      } catch (error) {\n        runInAction(\"delete activity error\", () => {\n          this.submitting = false;\n          this.target = \"\";\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"openCreateForm\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.editMode = true;\n      this.activity = undefined;\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"openEditForm\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.activity = this.activityRegistry.get(id);\n      this.editMode = true;\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"cancelSelectedActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.activity = undefined;\n    };\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"cancelFormOpen\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.editMode = false;\n    };\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"selectActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.activity = this.activityRegistry.get(id);\n      this.editMode = false;\n    };\n  }\n})), _class);\nexport default createContext(new ActivityStore());","map":{"version":3,"sources":["/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/src/app/stores/ActivityStore.ts"],"names":["observable","action","computed","configure","runInAction","createContext","agent","enforceActions","ActivityStore","getActivity","id","activityRegistry","get","activitiesByDate","Array","from","values","sort","a","b","Date","parse","date","Map","loadingInitial","activities","Activities","list","forEach","activity","split","set","error","details","console","log","submitting","create","editMode","update","event","target","currentTarget","name","delete","undefined"],"mappings":"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","sourcesContent":["import { observable, action, computed, configure, runInAction } from \"mobx\";\nimport { createContext, SyntheticEvent } from \"react\";\nimport { IActivity } from \"../models/activity\";\nimport agent from \"../api/agent\";\n\nconfigure({ enforceActions: \"always\" });\n\nclass ActivityStore {\n  @observable activityRegistry = new Map();\n  @observable activities: IActivity[] = [];\n  @observable activity: IActivity | undefined;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n  @observable target = \"\";\n\n  @computed get activitiesByDate() {\n    return Array.from(this.activityRegistry.values()).sort(\n      (a, b) => Date.parse(a.date) - Date.parse(b.date)\n    );\n  }\n\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activities = await agent.Activities.list();\n      runInAction(\"loading activities\", () => {\n        activities.forEach((activity) => {\n          activity.date = activity.date.split(\".\")[0];\n          this.activityRegistry.set(activity.id, activity);\n        });\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(\"load activities error\", () => {\n        this.loadingInitial = false;\n      });\n    }\n  };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n    if (activity) {\n      this.activity = activity;\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        runInAction(\"getting activity\", () => {\n          this.activity = activity;\n          this.loadingInitial = false;\n        })\n      } catch (error) {\n        runInAction(\"getting activity error\", () => {\n          this.loadingInitial = false;\n        })\n        console.log(error);\n      }\n    }\n  };\n\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n      runInAction(\"create activity\", () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.editMode = false;\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction(\"create activity error\", () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction(\"editing activity\", () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.editMode = false;\n        this.submitting = false;\n      });\n    } catch (error) {\n      runInAction(\"edit activity error\", () => {\n        this.submitting = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action deleteActivity = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Activities.delete(id);\n      runInAction(\"deleting activity\", () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n        this.target = \"\";\n      });\n    } catch (error) {\n      runInAction(\"delete activity error\", () => {\n        this.submitting = false;\n        this.target = \"\";\n      });\n      console.log(error);\n    }\n  };\n\n  @action openCreateForm = () => {\n    this.editMode = true;\n    this.activity = undefined;\n  };\n\n  @action openEditForm = (id: string) => {\n    this.activity = this.activityRegistry.get(id);\n    this.editMode = true;\n  };\n\n  @action cancelSelectedActivity = () => {\n    this.activity = undefined;\n  };\n\n  @action cancelFormOpen = () => {\n    this.editMode = false;\n  };\n\n  @action selectActivity = (id: string) => {\n    this.activity = this.activityRegistry.get(id);\n    this.editMode = false;\n  };\n}\n\nexport default createContext(new ActivityStore());\n"]},"metadata":{},"sourceType":"module"}