{"ast":null,"code":"import _initializerDefineProperty from \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _temp;\n\nimport { observable, action, computed } from \"mobx\";\nimport { createContext } from \"react\";\nimport agent from \"../api/agent\";\nlet ActivityStore = (_class = (_temp = class ActivityStore {\n  constructor() {\n    _initializerDefineProperty(this, \"activityRegistry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"activities\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"selectedActivity\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"loadingInitial\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"editMode\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"submitting\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"loadActivities\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"createActivity\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"editActivity\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"openCreateForm\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"openEditForm\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"cancelSelectedActivity\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"cancelFormOpen\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"selectActivity\", _descriptor14, this);\n  }\n\n  get activitiesByDate() {\n    return Array.from(this.activityRegistry.values()).sort((a, b) => Date.parse(a.date) - Date.parse(b.date));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"activityRegistry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"activities\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"selectedActivity\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"loadingInitial\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"editMode\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"submitting\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"activitiesByDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"activitiesByDate\"), _class.prototype), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"loadActivities\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loadingInitial = true;\n\n      try {\n        const activities = await agent.Activities.list();\n        activities.forEach(activity => {\n          activity.date = activity.date.split(\".\")[0];\n          this.activityRegistry.set(activity.id, activity);\n        });\n        this.loadingInitial = false;\n      } catch (error) {\n        console.log(error);\n        this.loadingInitial = false;\n      }\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"createActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.create(activity);\n        this.activityRegistry.set(activity.id, activity);\n        this.editMode = false;\n        this.submitting = false;\n      } catch (error) {\n        console.log(error);\n        this.submitting = false;\n      }\n    };\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"editActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.update(activity);\n        this.activityRegistry.set(activity.id, activity);\n        this.selectedActivity = activity;\n        this.editMode = false;\n        this.submitting = false;\n      } catch (error) {\n        this.submitting = false;\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"openCreateForm\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.editMode = true;\n      this.selectedActivity = undefined;\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"openEditForm\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.selectActivity = this.activityRegistry.get(id);\n      this.editMode = true;\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"cancelSelectedActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.selectedActivity = undefined;\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"cancelFormOpen\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.editMode = false;\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"selectActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.selectedActivity = this.activityRegistry.get(id);\n      this.editMode = false;\n    };\n  }\n})), _class);\nexport default createContext(new ActivityStore());","map":{"version":3,"sources":["/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/src/app/stores/ActivityStore.ts"],"names":["observable","action","computed","createContext","agent","ActivityStore","activitiesByDate","Array","from","activityRegistry","values","sort","a","b","Date","parse","date","Map","loadingInitial","activities","Activities","list","forEach","activity","split","set","id","error","console","log","submitting","create","editMode","update","selectedActivity","undefined","selectActivity","get"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA6C,MAA7C;AACA,SAASC,aAAT,QAA8B,OAA9B;AAEA,OAAOC,KAAP,MAAkB,cAAlB;IAEMC,a,sBAAN,MAAMA,aAAN,CAAoB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAQlB,MAAcC,gBAAd,GAAiC;AAC/B,WAAOC,KAAK,CAACC,IAAN,CAAW,KAAKC,gBAAL,CAAsBC,MAAtB,EAAX,EAA2CC,IAA3C,CACL,CAACC,CAAD,EAAIC,CAAJ,KAAUC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,IAAqBF,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,IAAb,CAD1B,CAAP;AAGD;;AAZiB,C,0FACjBhB,U;;;;;WAA8B,IAAIiB,GAAJ,E;;8EAC9BjB,U;;;;;WAAqC,E;;oFACrCA,U;;;;;kFACAA,U;;;;;WAA4B,K;;4EAC5BA,U;;;;;WAAsB,K;;8EACtBA,U;;;;;WAAwB,K;;qEAExBE,Q,2KAMAD,M;;;;;WAAwB,YAAY;AACnC,WAAKiB,cAAL,GAAsB,IAAtB;;AACA,UAAI;AACF,cAAMC,UAAU,GAAG,MAAMf,KAAK,CAACgB,UAAN,CAAiBC,IAAjB,EAAzB;AACAF,QAAAA,UAAU,CAACG,OAAX,CAAoBC,QAAD,IAAc;AAC/BA,UAAAA,QAAQ,CAACP,IAAT,GAAgBO,QAAQ,CAACP,IAAT,CAAcQ,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAhB;AACA,eAAKf,gBAAL,CAAsBgB,GAAtB,CAA0BF,QAAQ,CAACG,EAAnC,EAAuCH,QAAvC;AACD,SAHD;AAIA,aAAKL,cAAL,GAAsB,KAAtB;AACD,OAPD,CAOE,OAAOS,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAKT,cAAL,GAAsB,KAAtB;AACD;AACF,K;;kFAEAjB,M;;;;;WAAwB,MAAOsB,QAAP,IAA+B;AACtD,WAAKO,UAAL,GAAkB,IAAlB;;AACA,UAAI;AACF,cAAM1B,KAAK,CAACgB,UAAN,CAAiBW,MAAjB,CAAwBR,QAAxB,CAAN;AACA,aAAKd,gBAAL,CAAsBgB,GAAtB,CAA0BF,QAAQ,CAACG,EAAnC,EAAuCH,QAAvC;AACA,aAAKS,QAAL,GAAgB,KAAhB;AACA,aAAKF,UAAL,GAAkB,KAAlB;AACD,OALD,CAKE,OAAOH,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAKG,UAAL,GAAkB,KAAlB;AACD;AACF,K;;gFAEA7B,M;;;;;WAAsB,MAAOsB,QAAP,IAA+B;AACpD,WAAKO,UAAL,GAAkB,IAAlB;;AACA,UAAI;AACF,cAAM1B,KAAK,CAACgB,UAAN,CAAiBa,MAAjB,CAAwBV,QAAxB,CAAN;AACA,aAAKd,gBAAL,CAAsBgB,GAAtB,CAA0BF,QAAQ,CAACG,EAAnC,EAAuCH,QAAvC;AACA,aAAKW,gBAAL,GAAwBX,QAAxB;AACA,aAAKS,QAAL,GAAgB,KAAhB;AACA,aAAKF,UAAL,GAAkB,KAAlB;AACD,OAND,CAME,OAAOH,KAAP,EAAc;AACd,aAAKG,UAAL,GAAkB,KAAlB;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,K;;mFAEA1B,M;;;;;WAAwB,MAAM;AAC7B,WAAK+B,QAAL,GAAgB,IAAhB;AACA,WAAKE,gBAAL,GAAwBC,SAAxB;AACD,K;;iFAEAlC,M;;;;;WAAuByB,EAAD,IAAgB;AACrC,WAAKU,cAAL,GAAsB,KAAK3B,gBAAL,CAAsB4B,GAAtB,CAA0BX,EAA1B,CAAtB;AACA,WAAKM,QAAL,GAAgB,IAAhB;AACD,K;;2FAEA/B,M;;;;;WAAgC,MAAM;AACnC,WAAKiC,gBAAL,GAAwBC,SAAxB;AACH,K;;mFAEAlC,M;;;;;WAAwB,MAAM;AAC3B,WAAK+B,QAAL,GAAgB,KAAhB;AACH,K;;mFAEA/B,M;;;;;WAAyByB,EAAD,IAAgB;AACvC,WAAKQ,gBAAL,GAAwB,KAAKzB,gBAAL,CAAsB4B,GAAtB,CAA0BX,EAA1B,CAAxB;AACA,WAAKM,QAAL,GAAgB,KAAhB;AACD,K;;;AAGH,eAAe7B,aAAa,CAAC,IAAIE,aAAJ,EAAD,CAA5B","sourcesContent":["import { observable, action, computed } from \"mobx\";\nimport { createContext } from \"react\";\nimport { IActivity } from \"../models/activity\";\nimport agent from \"../api/agent\";\n\nclass ActivityStore {\n  @observable activityRegistry = new Map();\n  @observable activities: IActivity[] = [];\n  @observable selectedActivity: IActivity | undefined;\n  @observable loadingInitial = false;\n  @observable editMode = false;\n  @observable submitting = false;\n\n  @computed get activitiesByDate() {\n    return Array.from(this.activityRegistry.values()).sort(\n      (a, b) => Date.parse(a.date) - Date.parse(b.date)\n    );\n  }\n\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activities = await agent.Activities.list();\n      activities.forEach((activity) => {\n        activity.date = activity.date.split(\".\")[0];\n        this.activityRegistry.set(activity.id, activity);\n      });\n      this.loadingInitial = false;\n    } catch (error) {\n      console.log(error);\n      this.loadingInitial = false;\n    }\n  };\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n      this.activityRegistry.set(activity.id, activity);\n      this.editMode = false;\n      this.submitting = false;\n    } catch (error) {\n      console.log(error);\n      this.submitting = false;\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      this.activityRegistry.set(activity.id, activity);\n      this.selectedActivity = activity;\n      this.editMode = false;\n      this.submitting = false;\n    } catch (error) {\n      this.submitting = false;\n      console.log(error);\n    }\n  };\n\n  @action openCreateForm = () => {\n    this.editMode = true;\n    this.selectedActivity = undefined;\n  };\n\n  @action openEditForm = (id: string) => {\n    this.selectActivity = this.activityRegistry.get(id);\n    this.editMode = true;\n  };\n\n  @action cancelSelectedActivity = () => {\n      this.selectedActivity = undefined;\n  }\n\n  @action cancelFormOpen = () => {\n      this.editMode = false;\n  }\n\n  @action selectActivity = (id: string) => {\n    this.selectedActivity = this.activityRegistry.get(id);\n    this.editMode = false;\n  };\n}\n\nexport default createContext(new ActivityStore());\n"]},"metadata":{},"sourceType":"module"}