{"ast":null,"code":"var _jsxFileName = \"/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/src/features/activities/form/ActivityForm.tsx\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Grid, Segment, Form, Button } from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\"; // Interface\n\n// Mobx\nimport ActivityStore from \"../../../app/stores/ActivityStore\";\nimport { observer } from \"mobx-react-lite\";\n\nconst ActivityForm = ({\n  match,\n  history\n}) => {\n  const activityStore = useContext(ActivityStore);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    activity: initialFormState,\n    loadActivity,\n    clearActivity\n  } = activityStore;\n  const [activity, setActivity] = useState({\n    id: \"\",\n    title: \"\",\n    category: \"\",\n    description: \"\",\n    date: \"\",\n    city: \"\",\n    venue: \"\"\n  });\n  useEffect(() => {\n    if (match.params.id && activity.id.length === 0) {\n      loadActivity(match.params.id).then(() => initialFormState && setActivity(initialFormState));\n    }\n\n    return () => {\n      clearActivity();\n    };\n  }, [loadActivity, clearActivity, match.params.id, initialFormState, activity.id.length]);\n\n  const handleSubmit = () => {\n    if (activity.id.length === 0) {\n      let newActivity = { ...activity,\n        id: uuid()\n      };\n      createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n    } else {\n      editActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n    }\n  };\n\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.currentTarget;\n    setActivity({ ...activity,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    clearing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Title\",\n    value: activity.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.TextArea, {\n    onChange: handleInputChange,\n    name: \"description\",\n    rows: 2,\n    placeholder: \"Description\",\n    value: activity.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"category\",\n    placeholder: \"Category\",\n    value: activity.category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"date\",\n    type: \"datetime-local\",\n    placeholder: \"Date\",\n    value: activity.date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"city\",\n    placeholder: \"City\",\n    value: activity.city,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    onChange: handleInputChange,\n    name: \"venue\",\n    placeholder: \"Venue\",\n    value: activity.venue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    loading: submitting,\n    floated: \"right\",\n    positive: true,\n    type: \"submit\",\n    content: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => history.push(\"/activities\"),\n    floated: \"right\",\n    type: \"button\",\n    content: \"Cancel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default observer(ActivityForm);","map":{"version":3,"sources":["/Users/xz214ue/Documents/Tutorial/react-asp-dotnet-core/Reactivities-frontend/src/features/activities/form/ActivityForm.tsx"],"names":["React","useState","useContext","useEffect","Grid","Segment","Form","Button","v4","uuid","ActivityStore","observer","ActivityForm","match","history","activityStore","createActivity","editActivity","submitting","activity","initialFormState","loadActivity","clearActivity","setActivity","id","title","category","description","date","city","venue","params","length","then","handleSubmit","newActivity","push","handleInputChange","event","name","value","currentTarget"],"mappings":"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","sourcesContent":["import React, { useState, FormEvent, useContext, useEffect } from \"react\";\nimport { Grid, Segment, Form, Button } from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\n\n// Interface\nimport { IActivity } from \"../../../app/models/activity\";\n\n// Mobx\nimport ActivityStore from \"../../../app/stores/ActivityStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\ninterface DetailsParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailsParams>> = ({\n  match,\n  history,\n}) => {\n  const activityStore = useContext(ActivityStore);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    activity: initialFormState,\n    loadActivity,\n    clearActivity,\n  } = activityStore;\n\n  const [activity, setActivity] = useState<IActivity>({\n    id: \"\",\n    title: \"\",\n    category: \"\",\n    description: \"\",\n    date: \"\",\n    city: \"\",\n    venue: \"\",\n  });\n\n  useEffect(() => {\n    if (match.params.id && activity.id.length === 0) {\n      loadActivity(match.params.id).then(\n        () => initialFormState && setActivity(initialFormState)\n      );\n    }\n    return () => {\n      clearActivity();\n    };\n  }, [\n    loadActivity,\n    clearActivity,\n    match.params.id,\n    initialFormState,\n    activity.id.length,\n  ]);\n\n  const handleSubmit = () => {\n    if (activity.id.length === 0) {\n      let newActivity = {\n        ...activity,\n        id: uuid(),\n      };\n      createActivity(newActivity).then(() =>\n        history.push(`/activities/${newActivity.id}`)\n      );\n    } else {\n      editActivity(activity).then(() =>\n        history.push(`/activities/${activity.id}`)\n      );\n    }\n  };\n\n  const handleInputChange = (\n    event: FormEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value } = event.currentTarget;\n    setActivity({ ...activity, [name]: value });\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <Form onSubmit={handleSubmit}>\n            <Form.Input\n              onChange={handleInputChange}\n              name=\"title\"\n              placeholder=\"Title\"\n              value={activity.title}\n            />\n            <Form.TextArea\n              onChange={handleInputChange}\n              name=\"description\"\n              rows={2}\n              placeholder=\"Description\"\n              value={activity.description}\n            />\n            <Form.Input\n              onChange={handleInputChange}\n              name=\"category\"\n              placeholder=\"Category\"\n              value={activity.category}\n            />\n            <Form.Input\n              onChange={handleInputChange}\n              name=\"date\"\n              type=\"datetime-local\"\n              placeholder=\"Date\"\n              value={activity.date}\n            />\n            <Form.Input\n              onChange={handleInputChange}\n              name=\"city\"\n              placeholder=\"City\"\n              value={activity.city}\n            />\n            <Form.Input\n              onChange={handleInputChange}\n              name=\"venue\"\n              placeholder=\"Venue\"\n              value={activity.venue}\n            />\n            <Button\n              loading={submitting}\n              floated=\"right\"\n              positive\n              type=\"submit\"\n              content=\"Submit\"\n            />\n            <Button\n              onClick={() => history.push(\"/activities\")}\n              floated=\"right\"\n              type=\"button\"\n              content=\"Cancel\"\n            />\n          </Form>\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n"]},"metadata":{},"sourceType":"module"}